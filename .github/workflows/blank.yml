Design a scheduler with multilevel queue having two queues which will schedule the processes on the basis of pre-emptive shortest remaining processing time first algorithm (SROT) followed by a scheduling in which each process will get 2 units of time to execute. Also note that queue 1 has higher priority 
 than queue 2. Consider the following set of processes (for reference)with their arrival times and the CPU burst times in milliseconds. 
 ------------------------------------- Process Arrival-Time  Burst-Time ------------------------------------- P1 0 5 P2 1 3 P3 2 3 P4 4 1 ------------------------------------- 
 Calculate the average turnaround time and average waiting time for each process. The input for number of processes and their arrival time, burst time should be given by the user. 
 
Solution: 
 
#include<stdio.h> 
#include<conio.h> int main() 
{  
int n,i,j,avgw=0;  
float avgt=0,temp;
int burst[10],wait[10],process[10];
printf("\n process scheduling (shortest job first):\n");
scanf("%d", &n);  printf("enter the burst time: \n");  
for(i=0;i<n;i++)  
{   printf("burst time p %d:",i+1);   
scanf("%d", &burst[i]);    
process[i]=i;   printf("\n");  } 
for(i=0;i<n;i++)
{   for(j=1;j<n;j++)  
{    if(burst[i]>burst[j])
{     temp=burst[i];   
burst[i]=burst[j];     burst[j]=temp;    
temp=process[i]; 
    process[i]=process[j];   
    process[j]=temp;         }   }  }  
    printf("\n waiting time | turn around time \n ");  j=0; 
    for(i=0;i<n;i++)
    { 
    wait[i]=j;   j=burst[i]+j;   printf("\n P %d : %d \t\t %d", process[i]+1,wait[i],wait[i]+burst[i]);  
    avgw+=wait[i]; 
    avgt+=wait[i]+burst[i]; 
    }
    printf("\n\n"); 
    printf("average waiting time: %f\n average turn around time: %f \n\n",avgw/(float)n, avgt/(float)n); 
 
} 
 
 
